apply plugin: 'com.android.application'

android {
    compileSdkVersion Versions.compileSdkVersion
    defaultConfig {
        applicationId "com.jiahaoliuliu.androidcleanarchitecturecore"
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionName
        testInstrumentationRunner Tests.testInstrumentationRunner
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility Versions.androidJavaVersion
        targetCompatibility Versions.androidJavaVersion
    }
}

configurations.all {
    resolutionStrategy.eachDependency {
        DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "com.android.support") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "26.+"
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(path: ':entity')
    implementation project(path: ':datalayer')
    // TODO: Use injection for the network layer
    implementation project(path: ':networklayer')

    // Core libraries
    implementation Libs.support_appcompat_v7
    annotationProcessor AnnotationProcessor.support
    implementation Libs.rxjava
    implementation Libs.rxAndroid
    implementation Libs.dagger
    implementation Libs.dagger_support
    annotationProcessor AnnotationProcessor.dagger
    implementation Libs.picasso

    // Optional
    implementation Libs.cardView
    implementation Libs.recyclerView
    implementation Libs.liveData
    annotationProcessor AnnotationProcessor.liveData

    // Unit tests
    testImplementation Tests.junit
    testImplementation Tests.mockito
    androidTestImplementation Tests.testRunner
    androidTestImplementation Tests.espresso
}
